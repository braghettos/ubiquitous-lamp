<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.4.RELEASE</version>
		<relativePath />
	</parent>

	<groupId>it.insiel.innovazione</groupId>

	<artifactId>ipp-reference-java-app-backend</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>ipp-reference-java-app-backend</name>
	<description>Backend dell' applicazione di riferimento per progetti Java integrati con la toolchange DevOps Insiel </description>

	<properties>

		<!-- Build properties -->
		<java.version>11</java.version>
		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<junit.utReportFolder>${project.testresult.directory}/test</junit.utReportFolder>

		<!-- Properties used in site (Site uses only variables defined in properties)-->
		<site.project.name>${project.name}</site.project.name>

		<!-- Plugin versions -->
		<maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>
		<springdoc.version>1.2.32</springdoc.version>

		<!-- Elastic search logging - ECS -->
		<ecs-logging-java.version>1.3.0</ecs-logging-java.version>

	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc8</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- SpringDoc -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-data-rest</artifactId>
			<version>${springdoc.version}</version>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>6.8.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>6.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Necessario per utilizzare cucumber (che si basa su Junit4) in un contesto dove si utilizza JUnit5 (Juppiter) -->
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>5.7.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-spring</artifactId>
			<version>6.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- selenium -->
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>3.18.1</version>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.141.59</version>
			<scope>test</scope>
		</dependency>
		<!-- Elastic search logging - ECS -->
		<dependency>
			<groupId>co.elastic.logging</groupId>
			<artifactId>logback-ecs-encoder</artifactId>
			<version>${ecs-logging-java.version}</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies></dependencies>
	</dependencyManagement>

	<build>

		<finalName>${project.artifactId}-${project.version}</finalName>

		<plugins>

			<!-- skip execution in child module -->
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.36.1</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>copy-docker-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker/</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/docker</directory>
									<includes>
										<include>Dockerfile*</include>
										<include>.maven-dockerinclude</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-k8s-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/k8s</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources/k8s</directory>
									<includes>
										<include>*.yml</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-jacoco-agent</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker/</outputDirectory>
							<resources>
								<resource>
									<directory>./</directory>
									<includes>
										<include>org.jacoco.agent-0.8.7.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-apm-agent</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker/</outputDirectory>
							<resources>
								<resource>
									<directory>./</directory>
									<includes>
										<include>elastic-apm-agent-1.28.3.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-surefire-reports-backend-to-target</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>../target/test-results/surefire</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/surefire</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-test-cucumber-backend-to-target</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>../target/test-results/cucumber-html-reports/</outputDirectory>
							<resources>
								<resource>
									<directory>target/cucumber-html-reports/</directory>
									<directory>target/cucumber-reports/</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- <execution>
                        <id>copy-test-jacoco-backend-to-target</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>../target/test-results/jacoco-report/</outputDirectory>
                            <resources>
								<resource>
                                    <directory>target/jacoco-report/</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution> -->
					<execution>
						<id>copy-javadocs</id>
						<phase>site</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>../target/site/apidocs/</outputDirectory>
							<resources>
								<resource>
									<directory>target/site/apidocs/</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- TODO serve questo plugin? -->
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>1.5.8</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<!-- Produzione di report per i test di Cucumber -->
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.7</version>
				<executions>
					<execution>
						<id>jacoco-initialize</id>
						<phase>initialize</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-site</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<outputDirectory>target/jacoco-report</outputDirectory>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<excludes>
						<exclude>**/*Config.*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<!-- Produzione del file JSON con il risultato dei test da cui poi verranno creati i reports -->
				<groupId>net.masterthought</groupId>
				<artifactId>maven-cucumber-reporting</artifactId>
				<version>5.3.0</version>
				<executions>
					<execution>
						<id>execution</id>
						<phase>test</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<projectName>${project.groupId}-${project.artifactId}</projectName>
							<!-- optional, per documentation set this to "true" to bypass generation of Cucumber Reports entirely, defaults to false if not specified -->
							<skip>false</skip>
							<!-- output directory for the generated report -->
							<outputDirectory>${project.build.directory}</outputDirectory>
							<!-- optional, defaults to outputDirectory if not specified -->
							<inputDirectory>${project.build.directory}</inputDirectory>
							<jsonFiles>
								<!-- supports wildcard or name pattern -->
								<param>**/CucumberTestReport.json</param>
							</jsonFiles>
							<!-- optional, defaults to outputDirectory if not specified -->
							<classificationDirectory>${project.build.directory}</classificationDirectory>
							<!--							<parallelTesting>false</parallelTesting>-->
							<!-- optional, set true to group features by its Ids -->
							<mergeFeaturesById>false</mergeFeaturesById>
							<!-- optional, set true to get a final report with latest results of the same test from different test runs -->
							<mergeFeaturesWithRetest>false</mergeFeaturesWithRetest>
							<!-- optional, set true to fail build on test failures -->
							<checkBuildResult>false</checkBuildResult>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<!-- Force alphabetical order to have a reproducible build -->
					<runOrder>alphabetical</runOrder>
					<reportsDirectory>${project.build.directory}/surefire</reportsDirectory>
					<excludes>
						<exclude>**/*IT*</exclude>
						<exclude>**/*IntTest*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<layers>
						<enabled>true</enabled>
					</layers>
				</configuration>
			</plugin>
			<!-- e' importante che questo plugin sia eseguito dopo spring-boot-maven-plugin che crea l'artefatto jar -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.3.2</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<workingDirectory>${project.build.directory}/docker/</workingDirectory>
							<executable>${JAVA_HOME}/bin/java</executable>
							<arguments>
								<argument>-Djarmode=layertools</argument>
								<argument>-jar</argument>
								<argument>${project.build.directory}/${project.artifactId}-${project.version}.jar</argument>
								<argument>extract</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<!-- Integrate reports with JavaDoc -->
			<!-- cfr. https://maven.apache.org/plugins/maven-javadoc-plugin/usage.html -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<!-- <stylesheetfile>${basedir}/src/main/javadoc/stylesheet.css</stylesheetfile> -->
					<show>public</show>
				</configuration>
			</plugin>
		</plugins>
	</reporting>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>dev</spring.profiles.active>
			</properties>
		</profile>

		<profile>
			<id>test</id>
			<properties>
				<spring.profiles.active>test</spring.profiles.active>
			</properties>
		</profile>

		<profile>
			<id>collaudo</id>
			<properties>
				<spring.profiles.active>collaudo</spring.profiles.active>
			</properties>
		</profile>

		<profile>
			<id>prod</id>
			<properties>
				<spring.profiles.active>prod</spring.profiles.active>
			</properties>

			<build>
				<plugins></plugins>
			</build>
		</profile>
	</profiles>


</project>